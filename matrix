#!/bin/bash

# PROGRAM 1
# Author: Anthony Quach
# Date: April 4, 2018
# Description: This program is meant to perform basic matrix math including the following functions:
#   print the dimensions of a matrix
#   transpose a matrix
#   calculate the mean vector of a matrix
#   add two matrices
#   multiply two matrices.
# Input: from a file or stdin, input is whole numbers separated by tabs in a rectangular
#        matrix
#-------------------------------------------------------------------------------
readError=$( echo "Error. Unable to read file." )
unavailableError=$( echo "Error. No matrix available." )

temp=temporary$$
matrix1=temp1$$
matrix2=temp2$$
transposed=trans$$
average=avg$$
matrix_sum=mat_sum$$



# check to see if there is an operation selected to perform, if not throw an error
if [[ "$1" != "" ]]; then
    arg1="$1"
else
    echo "$unavailableError"
fi

#check to see if there is a second argument and assign it if it exists
#TODO: figure out if this file is readable or not
if [[ "$2" != "" ]]; then
    arg2="$2"
fi

#check to see if there is a third argument and assign it if it exists
#TODO: figure out if this file is readable or not
if [[ "$3" != "" ]]; then
    arg3="$3"
fi

#echo "$arg1"

# if [[ $arg1 == "" ]];
# 	then
# 		echo "$errorMessage"
# fi

function dims () {
#    # echo "Calling DIMS";
#    row_count=0
#    col_count=0   

# #read in the matrix given by the first argument into a variable called array
# readarray array < $arg2
# first_row=${array[0]}

# #find the length of the first row
# for i in $first_row
# do
# 	((col_count++))
# done                                

# #find the number of rows in the array
# for row in "${array[@]}";do                                                      
# 	  ((row_count++))                                                                
#  done  

# local dimensions="$row_count $col_count"
# echo $dimensions

while read line
do
  echo $line >> temp
done < "${1:-/dev/stdin}"

counter=0

while read row
do
	for i in $row
	do
		((counter++))
	done
done < temp

row_count=$(wc -l < temp)
col_count=$(($counter/$row_count))

echo "$row_count $col_count"

rm -f temp

}

transpose() {
 
   col_count=0 

   readarray array < $arg2
   first_row=${array[0]}

	#find the length of the first row
	for i in $first_row
		do
			((col_count++))
	done  

   for (( i=1; i <= $col_count; i++))
		do cut -f $i $arg2 | tr $'\n' $'\t' | sed -e "s/\t$/\n/g" >> transposed
	done

cat transposed
rm -f transposed
}


#TODO: format the mean to appear as a row matrix
mean() {
   
	# define some variables to hold temporary files
   m1t=./m1trans
   temp1=./tempfile

   
   # read in the matrix of interest
   row_count=0
   while read line
   do
   	echo $line >> $temp1
   	((row_count++))
   done < $arg2

   # transpose the matrix so we can perform the summation on each row
   transpose $tempfile >> $m1t

   #loop through the transposed matrix and sum all values in the row

   sums=0
   val=0
   while read row
   do
   	for i in $row 
   	do
   		sums=$(($sums+$i))
   		val=$(( (sums + ($row_count / 2)) / $row_count )) #(a + (b/2)*( (a>0)*2-1 )) / b
   	done
   	echo $val >> average
   	sums=0
   	val=0
   done < $m1t

   cat average
   rm -f average $temp1 $m1t
}

add() {
	echo "Calling ADD";
   
	temp=./tempfile
	trans=./trans

	while read row
	do
		for i in $row
		do
			echo -n "$i	" >> $temp
		done
	done < $arg2

	echo -e >> $temp

	while read row
	do
		for j in $row
		do
			echo -n "$j	" >> $temp
		done
	done < $arg3

	echo -e >> $temp

	arg2=$temp
	transpose tempfile >> $trans

	sums=0
	while read row
	do
		for k in $row
		do
			sums=$(($sums+$k))
		done
		echo $sums >> matrix_sum
		sums=0
	done < $trans
	
	cat matrix_sum
	rm -f $temp $trans matrix_sum
}

multiply() {
   echo "Calling MULTIPLY";
}

if [ "$1" == "dims" ]  #check what the command line argument is
	then
		# dims $arg2 #call to the function
		dims "${@:2}" #call to the function
fi

if [ "$1" == "transpose" ]  #check what the command line argument is
	then
		transpose  #call to the function
fi

if [ "$1" == "mean" ]  #check what the command line argument is
	then
		mean  #call to the function
fi

if [ "$1" == "add" ]  #check what the command line argument is
	then
		add  #call to the function
fi

if [ "$1" == "multiply" ]  #check what the command line argument is
	then
		multiply  #call to the function
fi