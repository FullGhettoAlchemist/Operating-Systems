#!/bin/bash

# PROGRAM 1
# Author: Anthony Quach
# Date: April 4, 2018
# Description: This program is meant to perform basic matrix math including the following functions:
#   print the dimensions of a matrix
#   transpose a matrix
#   calculate the mean vector of a matrix
#   add two matrices
#   multiply two matrices.
# Input: from a file or stdin, input is whole numbers separated by tabs in a rectangular
#        matrix
#-------------------------------------------------------------------------------
readError=$( echo "Error. Unable to read file." )
unavailableError=$( echo "Error. No matrix available." )

temp=temporary$$
temp2=temporary2$$
matrix1=temp1$$
matrix2=temp2$$
transposed=trans$$
transposed2=transposed2$$
average=avg$$
matrix_sum=mat_sum$$
results=result$$

trap 'rm -f $temp $temp2 $results $transposed $transposed2 $average $results; exit 1' INT HUP TERM

# check to see if there is an operation selected to perform, if not throw an error
if [[ "$1" != "" ]]; then
    arg1="$1"
else
    echo "$unavailableError"
fi

#check to see if there is a second argument and assign it if it exists
#TODO: figure out if this file is readable or not
if [[ "$2" != "" ]]; then
    arg2="$2"
fi

#check to see if there is a third argument and assign it if it exists
#TODO: figure out if this file is readable or not
if [[ "$3" != "" ]]; then
    arg3="$3"
fi

#echo "$arg1"

# if [[ $arg1 == "" ]];
# 	then
# 		echo "$errorMessage"
# fi

function dims () {
#    # echo "Calling DIMS";
#    row_count=0
#    col_count=0   

# #read in the matrix given by the first argument into a variable called array
# readarray array < $arg2
# first_row=${array[0]}

# #find the length of the first row
# for i in $first_row
# do
# 	((col_count++))
# done                                

# #find the number of rows in the array
# for row in "${array[@]}";do                                                      
# 	  ((row_count++))                                                                
#  done  

# local dimensions="$row_count $col_count"
# echo $dimensions

#if a file exists, read from it and make a copy to use in temp file
#if not, get input from stdin and copy that over to a temp file
while read line
do
  echo $line >> temp
done < "${1:-/dev/stdin}"

#initiate a counter to keep track of total number of elements in the matrix
counter=0

#loop through the temp file to count all elements 
while read row
do
	for i in $row
	do
		((counter++))
	done
done < temp

#count the number of lines in the temp file using word count
row_count=$(wc -l < temp)
#the column count is equal to the total number of elements/# of rows
col_count=$(($counter/$row_count))

#print out the result
echo "$row_count $col_count"

rm -f temp

}

transpose () {
 
#    col_count=0 

#    readarray array < $arg2
#    first_row=${array[0]}

# 	#find the length of the first row
# 	for i in $first_row
# 		do
# 			((col_count++))
# 	done  

#    for (( i=1; i <= $col_count; i++))
# 		do cut -f $i $arg2 | tr $'\n' $'\t' | sed -e "s/\t$/\n/g" >> transposed
# 	done

# cat transposed
# rm -f transposed

#if a file exists, read from it and make a copy to use in temp file
#if not, get input from stdin and copy that over to a temp file
# while read line
# do
#   echo -e $line >> temp
# done < "${1:-/dev/stdin}"

while read line
do
  for i in $line
  do
  	echo -e -n "$i \t" >> temp
  done
  echo -e >> temp
done < "${1:-/dev/stdin}"

counter=0

#loop through the temp file to count all elements 
while read row
do
	for i in $row
	do
		((counter++))
	done
done < temp

row_count=$(wc -l < temp)
col_count=$(($counter/$row_count))

   for (( i=1; i <= $col_count; i++)) # previously <=
		do cut -f $i temp | tr "\n" "\t" >> transposed
		echo -e >> transposed
	done

cat transposed
rm -f temp transposed

}


#TODO: format the mean to appear as a row matrix
mean() {
   
	# define some variables to hold temporary files
   
   # read in the matrix of interest
   while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> temp2
	  done
	  echo -e >> temp2
	done < "${1:-/dev/stdin}"

   # transpose the matrix so we can perform the summation on each row
   transpose temp2 >> transposed2

   #loop through the transposed matrix and sum all values in the row

   sums=0
   val=0
   while read row
   do
   	for i in $row 
   	do
   		sums=$(($sums+$i))
   		val=$(( (sums + ($row_count / 2)) / $row_count )) #(a + (b/2)*( (a>0)*2-1 )) / b
   	done
   	echo $val >> average
   	sums=0
   	val=0
   done < transposed2

   cat average | tr '\n' '\t' > results
   cat results
   rm -f average transposed2 temp2 results
}

add() {
   
   #read file in $1
   while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> temp
	  done
	  echo -e >> temp
	done < "${1:-/dev/stdin}"

	#read file in $2
	while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> temp2
	  done
	  echo -e >> temp2
	done < "${2:-/dev/stdin}"


	while read row
	do
		for i in $row
		do
			echo -n "$i	" >> matrix_sum
		done
	done < temp

	echo -e >> matrix_sum

	while read row
	do
		for j in $row
		do
			echo -n "$j	" >> matrix_sum
		done
	done < temp2

	echo -e >> matrix_sum

	arg2=$temp
	transpose matrix_sum >> transposed2

	sums=0
	while read row
	do
		for k in $row
		do
			sums=$(($sums+$k))
		done
		echo $sums >> results
		sums=0
	done < transposed2
	
	echo "intermediate:"
	cat matrix_sum
	echo "transposed intermediate"
	cat transposed2
	echo "resuts:"
	cat results
	rm -f temp temp2 matrix_sum results transposed2
}

multiply() {
   echo "Calling MULTIPLY";
}

if [ "$1" == "dims" ]  #check what the command line argument is
	then
		# dims $arg2 #call to the function
		dims "${@:2}" #call to the function
fi

if [ "$1" == "transpose" ]  #check what the command line argument is
	then
		transpose "${@:2}"  #call to the function
fi

if [ "$1" == "mean" ]  #check what the command line argument is
	then
		mean "${@:2}" #call to the function
fi

if [ "$1" == "add" ]  #check what the command line argument is
	then
		add "${@:2}" #call to the function
fi

if [ "$1" == "multiply" ]  #check what the command line argument is
	then
		multiply  #call to the function
fi