#!/bin/bash

# PROGRAM 1
# Author: Anthony Quach
# Date: April 4, 2018
# Description: This program is meant to perform basic matrix math including the following functions:
#   print the dimensions of a matrix
#   transpose a matrix
#   calculate the mean vector of a matrix
#   add two matrices
#   multiply two matrices.
# Input: from a file or stdin, input is whole numbers separated by tabs in a rectangular
#        matrix
#-------------------------------------------------------------------------------
readError=$( echo "Error. Unable to read file." )
unavailableError=$( echo "Error. No matrix available." )
tooManyError=$(echo "Error. Too many arguments.")
mismatchError=$(echo "Error. Dimensional mismatch.")

temp=temporary$$
temp2=temporary2$$
temp3=temporary3$$
temp4=temporary4$$
mat1=matrix1$$
mat2=matrix2$$
transposed=trans$$
transposed2=transposed2$$
average=avg$$
matrix_sum=mat_sum$$
results=result$$
final=finalresults$$
mult1=multtemp1$$
mult2=multtemp2$$
multdims=multidims$$

trap 'rm -f $temp $temp2 $temp3 $temp4 $mat1 $mat2 $final $mult1 $mult $transposed $transposed2 $average $results ; exit 1' INT HUP TERM

# # check to see if there is an operation selected to perform, if not throw an error
# if [[ "$1" != "" ]]; then
#     arg1="$1"
# else
#     echo "$unavailableError"
#     exit 21
# fi

# #check to see if there is a second argument and assign it if it exists
# #TODO: figure out if this file is readable or not
# if [[ "$2" != "" ]]; then
#     arg2="$2"
# fi

# #check to see if there is a third argument and assign it if it exists
# #TODO: figure out if this file is readable or not
# if [[ "$3" != "" ]]; then
#     arg3="$3"
# fi

# #echo "$arg1"

# # if [[ $arg1 == "" ]];
# # 	then
# # 		echo "$errorMessage"
# # fi

function dims () {

if [[ "$2" != "" ]]; then
    echo "Error. Too many arguments." >&2
    exit 21
fi
#if a file exists, read from it and make a copy to use in temp file
#if not, get input from stdin and copy that over to a temp file
while read line
do
  echo $line >> temp
done < "${1:-/dev/stdin}"

#initiate a counter to keep track of total number of elements in the matrix
counter=0

#loop through the temp file to count all elements 
while read row
do
	for i in $row
	do
		((counter++))
	done
done < temp

#count the number of lines in the temp file using word count
row_count=$(wc -l < temp)
#the column count is equal to the total number of elements/# of rows
col_count=$(($counter/$row_count))

#print out the result
echo "$row_count $col_count"

rm -f temp

}

transpose () {

if [[ "$2" != "" ]]; then
    echo "Error. Too many arguments." >&2
    exit 21
fi

while read line
do
  for i in $line
  do
  	echo -e -n "$i\t" >> temp2
  done
  echo -e >> temp2
done < "${1:-/dev/stdin}"

matdims=$(dims temp2)
set -- $matdims
row_count=$1
col_count=$2

for (( i=1; i <= $col_count; i++))
	do cut -f $i temp2 | tr "\n" "\t" >> transposed
	echo -e >> transposed
done

cut -f 1-$row_count transposed >> final
cat final
rm -f temp2 transposed final

}


# #TODO: format the mean to appear as a row matrix
mean() {
   
	# define some variables to hold temporary files
   
   # read in the matrix of interest
   while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> temp3
	  done
	  echo -e >> temp3
	done < "${1:-/dev/stdin}"

   # transpose the matrix so we can perform the summation on each row
   transpose temp3 >> transposed2
   #loop through the transposed matrix and sum all values in the row

   	matdims=$(dims temp3)
	set -- $matdims
	row_count=$1
   sums=0
   val=0
   while read row
   do
   	for i in $row 
   	do
   		sums=$(($sums+$i))
   		#val=$(( (sums + ($row_count / 2)) / $row_count )) #(a + (b/2)*( (a>0)*2-1 )) / b
		#val=$(( ($sums+($row_count/2))*(($sums>0)*2-1/$row_count) ))
		val=$(((sums + (row_count/2)*( (sums>0)*2-1 )) / row_count))
   	done
   	echo $val >> average
   	sums=0
   	val=0
   done < transposed2

   paste -s average 
   #cat average
   # cat average | tr '\n' '\t' >> results
   # echo -e >> results
   # cat results
   rm -f average transposed2 temp3 #results
}

add (){
   #read file in $1

   if [[ "$2" == "" ]]; then
    echo "Error. No argument present." >&2
    exit 21
	fi

   while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> mat1
	  done
	  echo -e >> mat1
	done < "${1:-/dev/stdin}"
	
	
	#read file in $2
	while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> mat2
	  done
	  echo -e >> mat2
	done < "${2:-/dev/stdin}"
	
	mat1dims=$(dims mat1)
	mat2dims=$(dims mat2)

	if [ "$mat1dims" != "$mat2dims" ]; then
		echo "Error. Dimensional mismatch." >&2
		rm -f mat1 mat2
		exit 21
	fi

	set -- $mat1dims
	col_count=$2
	((col_count++))

	while read <&3 file1 && read <&4 file2
	do
		i=1
		while [ $i -lt $col_count ]
		do
			left=$(echo "$file1" | cut -f"$i")
			right=$(echo "$file2" | cut -f"$i")
			sums=$((($left+$right)))
			echo -ne "$sums\t" >> results #try using paste to a file here, trailing tabs is probably the issue
			i=$[$i+1]
		done
		echo -e >> results
	done 3<mat1 4<mat2

	((col_count--))
	cut -f 1-$col_count results >> final
	cat final
	# cut - 1-$(( $col_count * 2 -1)) results >> final
	rm -f mat1 mat2 results final
}

multiply() {
   #read file in $1
   while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> mat1
	  done
	  echo -e >> mat1
	done < "${1:-/dev/stdin}"

	#read file in $2
	while read line
	do
	  for i in $line
	  do
	  	echo -e -n "$i \t" >> mat2
	  done
	  echo -e >> mat2
	done < "${2:-/dev/stdin}"

	mat1counter=0
	while read row
	do
		for i in $row
		do
			((mat1counter++))
		done
	done < mat1

#count the number of lines in the temp file using word count
	mat1rows=$(wc -l < mat1)
#the column count is equal to the total number of elements/# of rows
	mat1cols=$(($mat1counter/$mat1rows))

	echo $mat1rows $mat1cols
	mat2counter=0
	while read row
	do
		for i in $row
		do
			((mat2counter++))
		done
	done < mat2

#count the number of lines in the temp file using word count
	mat2rows=$(wc -l < mat2)
#the column count is equal to the total number of elements/# of rows
	mat2cols=$(($mat2counter/$mat2rows))

	echo $mat2rows $mat2cols
	#mat1dims=$(dims mat1)
	# set -- $mat1dims
	# mat1rows=$1
	# mat1cols=$2

	# set -- $mat2dims
	# mat2rows=$1
	# mat2cols=$2

	if [ "$mat1cols" != "$mat2rows" ]; then
		echo "Error. Dimensional mismatch." >&2
		rm -f mat1 mat2
		exit 21
	fi

	transpose mat2 >> transposed2

	while read leftmatline
	do
		i=0
		while [ $i -lt $mat2cols ]
		do
			echo -e -n "$leftmatline\t" >> mult1
			echo -e >> mult1
			((i++))
		done
	done < mat1

	# checkdims1=$(dims mult1)
	# echo "mult1 dimensions: $checkdims1"
	# checkdims2=$(dims mult2)
	# echo "mult2 dimensions: $checkdims2"
	for((i=0;i<$mat1rows;i++))
	do
		paste transposed2 >> mult2
	done

	((mat1cols++))
	while read <&3 file1 && read <&4 file2
	do
		i=1
		running_total=0
		while [ $i -lt $mat1cols ]
		do
			left=$(echo "$file1" | cut -f"$i")
			right=$(echo "$file2" | cut -f"$i")
			products=$((($left*$right)))
			running_total=$((running_total+$products))
			i=$[$i+1]
		done
		echo $running_total >> temp4
	done 3<mult1 4<mult2

	#((col_count--))
	#cut -f 1-$col_count results >> final
	counter=0
	while read templine
	do
		for i in $templine
		do
			if [ $counter == $mat1rows ]
				then
				echo -e >> temp3
				counter=0
			fi
			echo -e -n "$i\t" >> temp3
			((counter++))
		done
	done < temp4

	echo -e >> temp3
	cut -f 1-$mat1rows temp3 >> final
	echo -e >> final
	cat final
	rm -f mat1 mat2 results transposed2 mult1 mult2 temp4 temp3 final multdims

}

if [ "$1" == "dims" ]  #check what the command line argument is
	then
		# dims $arg2 #call to the function
		dims "${@:2}" #call to the function

	elif [ "$1" == "transpose" ]  #check what the command line argument is
	then
		transpose "${@:2}"

	elif [ "$1" == "mean" ]  #check what the command line argument is
	then
		mean "${@:2}" #call to the function

	elif [ "$1" == "add" ]  #check what the command line argument is
	then
		add "${@:2}"

	elif [ "$1" == "multiply" ]  #check what the command line argument is
	then
		multiply "${@:2}"

	else
		echo "Error. Bad command" >&2
		exit 21
fi

# if [ "$1" == "transpose" ]  #check what the command line argument is
# 	then
# 		transpose "${@:2}"  #call to the function
# fi

# if [ "$1" == "mean" ]  #check what the command line argument is
# 	then
# 		mean "${@:2}" #call to the function
# fi

# if [ "$1" == "add" ]  #check what the command line argument is
# 	then
# 		add "${@:2}" #call to the function
# fi

# if [ "$1" == "multiply" ]  #check what the command line argument is
# 	then
# 		multiply "${@:2}" #call to the function
# fi